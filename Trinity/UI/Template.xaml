<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ut="clr-namespace:Trinity.UIComponents"
             xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">
    <ut:IntToStringConverter x:Key="intToStringConverter"/>

    <Style x:Key="LinkButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock TextDecorations="Underline"><InlineUIContainer>
                    		<ContentPresenter />
                    	</InlineUIContainer></TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#FF00AAFF" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- For Design Time Viewing in VS Dark Theme -->
    <Style TargetType="{x:Type UserControl}">
        <Style.Triggers>
            <Trigger Property="componentModel:DesignerProperties.IsInDesignMode" Value="true">
                <Setter Property="Background" Value="#FFAAAAAA" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#FF666666" />
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#FF666666" />
    </Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Margin" Value="5" />
    </Style>
    <ControlTemplate x:Key="Slider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="50"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Slider Grid.Row="1"
                    Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                    Delay="{TemplateBinding Delay}"
                    Interval="{TemplateBinding Interval}"
                    IsEnabled="{TemplateBinding IsEnabled}"
                    IsMoveToPointEnabled="True"
                    IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}"
                    LargeChange="{TemplateBinding LargeChange}"
                    Orientation="{TemplateBinding Orientation}"
                    SmallChange="{TemplateBinding SmallChange}"
                    TickFrequency="{TemplateBinding TickFrequency}"
                    TickPlacement="{TemplateBinding TickPlacement}"
                    Ticks="{TemplateBinding Ticks}"
                    ToolTip="{TemplateBinding ToolTip}"
                    Maximum="{TemplateBinding Maximum}"
                    Minimum="{TemplateBinding Minimum}"
                    HorizontalAlignment="Stretch" 
                    VerticalAlignment="Center"
                    Margin="0,0,2,0"
                    Style="{x:Null}"
                    x:Name="MySlider"/>
            <TextBox Grid.Column="1" Grid.Row="1"
                        Text="{Binding Value, Converter={StaticResource intToStringConverter}, RelativeSource={RelativeSource TemplatedParent}}"                     
                        HorizontalAlignment="Stretch" 
                        Margin="0,2,2,2" TextAlignment="Center" 
                        IsReadOnly="True"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderLTB" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="55"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Slider Grid.Row="1"
                    Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                    Delay="{TemplateBinding Delay}"
                    Interval="{TemplateBinding Interval}"
                    IsEnabled="{TemplateBinding IsEnabled}"
                    IsMoveToPointEnabled="True"
                    IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}"
                    LargeChange="{TemplateBinding LargeChange}"
                    Orientation="{TemplateBinding Orientation}"
                    SmallChange="{TemplateBinding SmallChange}"
                    TickFrequency="{TemplateBinding TickFrequency}"
                    TickPlacement="{TemplateBinding TickPlacement}"
                    Ticks="{TemplateBinding Ticks}"
                    ToolTip="{TemplateBinding ToolTip}"
                    Maximum="{TemplateBinding Maximum}"
                    Minimum="{TemplateBinding Minimum}"
                    HorizontalAlignment="Stretch" 
                    VerticalAlignment="Center"
                    Margin="0,0,2,0"
                    Style="{x:Null}"
                    x:Name="MySlider"/>
            <TextBox Grid.Column="1" Grid.Row="1"
                        Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" 
                        HorizontalAlignment="Stretch" 
                        Margin="0,2,2,2" 
                        TextAlignment="Center" 
                        IsReadOnly="True"/>
        </Grid>
    </ControlTemplate>
    
    <!-- Shows a ComboBox without a SelectedItem -->
    <ControlTemplate x:Key="ActionsComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="MainGrid" MinWidth="10" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="0" MinWidth="10"  />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton BorderBrush="Transparent" Tag="{TemplateBinding Tag}" Background="Transparent" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="IsTabStop" Value="False"/>
                        <Setter Property="Focusable" Value="False"/>
                        <Setter Property="ClickMode" Value="Press"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <WrapPanel>
                                        <Label Content="{TemplateBinding Tag}" Foreground="White" />
                                        <Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                            <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="White" HorizontalAlignment="Center" Margin="5,1,0,0" VerticalAlignment="Center"/>
                                        </Grid>
                                    </WrapPanel>
                                    <ControlTemplate.Triggers>
                                        <!--<Trigger Property="IsChecked" Value="True">
                                            <Setter Property="RenderPressed" TargetName="Chrome" Value="True"/>
                                        </Trigger>-->
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
            
            <!--<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                <Setter Property="Background" Value="#FFF4F4F4"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>
